      - name: Send Slack and Email Alert if High/Error SSL Certificates Found
        if: always()
        shell: pwsh
        run: |
          $data = Get-Content sslCertificateDetails.json | ConvertFrom-Json
          $alerts = $data | Where-Object { $_.Severity -in @("High","Error") }

          if ($alerts.Count -gt 0) {
              Write-Host "⚠️ High/Expired certificates found. Sending Slack and Email Alert..."

              # Add owner info from endpoints.json
              $endpoints = Get-Content endpoints.json | ConvertFrom-Json
              foreach ($alert in $alerts) {
                  $endpoint = $endpoints | Where-Object { $_.hostname -eq $alert.hostname }
                  $alert | Add-Member -NotePropertyName owner -NotePropertyValue ($endpoint.owner) -Force
              }

              # Send to Slack
              .\Send-SlackAlert.ps1 $alerts

              # Send Email via Gmail SMTP
              $smtpServer = "smtp.gmail.com"
              $smtpPort = 587
              $smtpUser = "${{ secrets.SMTP_USER }}"
              $smtpPass = "${{ secrets.SMTP_PASS }}" | ConvertTo-SecureString -AsPlainText -Force
              $from = "${{ secrets.SMTP_USER }}"
              $to = "santhoshteam1205@outlook.com"

              $subject = "SSL Expiry Alert - High Severity"

              # Build HTML table rows
              $rows = ""
              foreach ($alert in $alerts) {
                  $rows += "<tr><td>$($alert.hostname)</td><td>$($alert.Severity)</td><td>$($alert.DaysToExpire)</td><td>$($alert.environment)</td><td>$($alert.owner)</td></tr>"
              }

              # HTML email body
              $body = @"
<h2>SSL Expiry Alert Detected</h2>
<p>The following certificates are near expiry or expired:</p>
<table border='1' cellpadding='6' cellspacing='0'>
<tr>
<th>Hostname</th><th>Severity</th><th>Days Left</th><th>Environment</th><th>Owner</th>
</tr>
$rows
</table>
"@

              Send-MailMessage -From $from -To $to -Subject $subject -Body $body -BodyAsHtml -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential (New-Object System.Management.Automation.PSCredential($smtpUser, $smtpPass))
          }
          else {
              Write-Host "✅ No critical SSL alerts detected."
          }
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
