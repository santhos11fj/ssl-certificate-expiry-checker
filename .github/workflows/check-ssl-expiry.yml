name: check-ssl-expiry

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'   # ‚úÖ Safe daily schedule (runs once per day at 00:00 UTC)

env:
  TEST_MODE: "false"   # ‚úÖ Set to "true" to force test alerts, "false" for production

jobs:
  check_ssl_expiry:
    name: 'Check SSL Expiry'
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Display Trigger Type in Logs
      - name: Show Trigger Event
        run: |
          echo "‚úÖ Workflow Trigger Type: $GITHUB_EVENT_NAME"
          echo "üë§ Triggered By: $GITHUB_ACTOR"
          echo "üåø Branch: $GITHUB_REF"

      - uses: actions/checkout@v4

      - name: Check SSL Expiry
        if: env.TEST_MODE == 'false'
        shell: pwsh
        run: |
          ./check-ssl-expiry.ps1

      # ‚úÖ Test Mode Injection Step (Only Runs if TEST_MODE is true)
      - name: Inject Dummy SSL Data (Test Mode)
        if: env.TEST_MODE == 'true'
        run: |
          echo '[{"hostname":"expired.test.com","Severity":"High","DaysToExpire":1,"environment":"prod"}]' > sslCertificateDetails.json
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SSL Expiry Custom HTML Report
          path: ./_site
          if-no-files-found: warn
          retention-days: 90

      - name: Run Pester Tests
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Import-Module Pester
          Invoke-Pester -Script ./tests/Run-Tests.ps1 `
            -OutputFile ./TestResults.xml `
            -OutputFormat JUnitXml

      # ‚úÖ Slack & Email Alerts Integration
      - name: Send Slack and Email Alert if High/Error SSL Certificates Found
        if: always()
        shell: pwsh
        run: |
          $data = Get-Content sslCertificateDetails.json | ConvertFrom-Json
          $alerts = $data | Where-Object { $_.Severity -in @("High","Error") }

          if ($alerts.Count -gt 0) {
              Write-Host "‚ö†Ô∏è High/Expired certificates found. Sending Slack Alert..."
              $endpoints = Get-Content endpoints.json | ConvertFrom-Json
              foreach ($alert in $alerts) {
                  $endpoint = $endpoints | Where-Object { $_.hostname -eq $alert.hostname }
                  $alert | Add-Member -NotePropertyName owner -NotePropertyValue ($endpoint.owner) -Force
              }
              .\Send-SlackAlert.ps1 $alerts

              Write-Host "üìß Sending Email Alert to santhoshteam1205@outlook.com..."
              $rows = $alerts | ForEach-Object {
                  "<tr>
                      <td>$($_.hostname)</td>
                      <td>$($_.Severity)</td>
                      <td>$($_.DaysToExpire)</td>
                      <td>$($_.environment)</td>
                      <td>$($_.owner)</td>
                   </tr>"
              } | Out-String

              $body = @"
              <h2>SSL Expiry Alert Detected</h2>
              <p>The following certificates are near expiry or expired:</p>
              <table border='1' cellpadding='6' cellspacing='0'>
                <tr>
                  <th>Hostname</th><th>Severity</th><th>Days Left</th><th>Environment</th><th>Owner</th>
                </tr>
                $rows
              </table>
              "@

              ./Send-SMTPAlert.ps1 `
                -SmtpServer "smtp.gmail.com" `
                -SmtpPort 587 `
                -UseSsl `
                -From "${{ secrets.SMTP_FROM }}" `
                -To @("santhoshteam1205@outlook.com") `
                -Subject "SSL Expiry Alert - GitHub Actions" `
                -BodyHtml $body `
                -Username "${{ secrets.SMTP_USER }}" `
                -Password "${{ secrets.SMTP_PASS }}"
          } else {
              Write-Host "‚úÖ No critical SSL alerts detected."
          }
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      # ‚úÖ GitHub Issue Creation
      - name: Create GitHub Issue for High/Error SSL Certificates
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('sslCertificateDetails.json'));
            const endpoints = JSON.parse(fs.readFileSync('endpoints.json'));

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            const existingTitles = issues.data.map(issue => issue.title);

            for (const risk of data.filter(d => ["High","Error"].includes(d.Severity))) {
              const endpoint = endpoints.find(e => e.hostname === risk.hostname);
              const issueTitle = `üö® SSL Alert: ${risk.hostname} (${risk.Severity} severity)`;

              if (!existingTitles.includes(issueTitle)) {
                const issueBody = [
