name: check-ssl-expiry

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * 1,2,3,4,5'  # Runs at 01:00 UTC on weekdays

jobs:
  check_ssl_expiry:
    name: 'Check SSL Expiry'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check SSL Expiry
        shell: pwsh
        run: |
          ./check-ssl-expiry.ps1

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SSL Expiry Custom HTML Report
          path: ./_site
          if-no-files-found: warn
          retention-days: 90

      - name: Run Pester Tests
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Import-Module Pester
          Invoke-Pester -Script ./tests/Run-Tests.ps1 `
            -OutputFile ./TestResults.xml `
            -OutputFormat JUnitXml

      # ✅ Slack Alert Integration with Owner field
      - name: Send Slack Alert if High/Error SSL Certificates Found
        if: always()
        shell: pwsh
        run: |
          $data = Get-Content sslCertificateDetails.json | ConvertFrom-Json
          $alerts = $data | Where-Object { $_.Severity -in @("High","Error") }
          if ($alerts.Count -gt 0) {
              Write-Host "⚠️ High/Expired certificates found. Sending Slack Alert..."
              $endpoints = Get-Content endpoints.json | ConvertFrom-Json
              foreach ($alert in $alerts) {
                  $endpoint = $endpoints | Where-Object { $_.hostname -eq $alert.hostname }
                  $alert | Add-Member -NotePropertyName owner -NotePropertyValue ($endpoint.owner)
              }
              .\Send-SlackAlert.ps1 $alerts
          } else {
              Write-Host "✅ No critical SSL alerts detected."
          }
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      # ✅ Incident Management - Auto GitHub Issue Creation
      - name: Create GitHub Issue for High/Error SSL Certificates
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('sslCertificateDetails.json'));
            const endpoints = JSON.parse(fs.readFileSync('endpoints.json'));

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            const existingTitles = issues.data.map(issue => issue.title);

            for (const risk of data.filter(d => ["High","Error"].includes(d.Severity))) {
              const endpoint = endpoints.find(e => e.hostname === risk.hostname);
              const issueTitle = `🚨 SSL Alert: ${risk.hostname} (${risk.Severity} severity)`;

              if (!existingTitles.includes(issueTitle)) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: `### SSL Certificate Alert 🚨

  - **Hostname:** ${risk.hostname}
  - **Severity:** ${risk.Severity}
  - **Days Left:** ${risk.DaysToExpire}
  - **Environment:** ${risk.environment}
  - **Owner:** ${endpoint?.owner || 'Not Assigned'}

  Please renew this SSL certificate immediately.

  *(This issue was automatically generated by GitHub Actions SSL monitoring.)*`,
                  labels: ["SSL Certificate", risk.Severity],
                });
              }
            }

  deploy:
    if: ${{ always() }}
    name: Deploy to GitHub Pages
    needs: check_ssl_expiry
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: SSL Expiry Custom HTML Report
          path: .

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
